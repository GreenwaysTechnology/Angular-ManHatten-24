Typescript
Reactive Programming -rxjs
Angular
node :
vscode

.......................................................................................

Typescript:
..........

What is typescript?

 Typescript that scales javascript.
 scaling is nothing but expanding features.

Javascript design approach

-Javascript object based language not Object oriented.
-Javascript is dynamically typed- types of the language is known during runtime.
  -No compile time type checking.


ECMA Standards:
 ES 1,3,4,5
 ES 6

2009, The project was started to make javascript looks like other object oriented langugages
 - classes,interfaces.... : coffee script.

source code would be coffee script
 
 Customer.coffee            
  class,interfaces --compile    --Customer.js

2010, Microsoft started project to create object oriented javascript using C#

static typed javascript.

 C# ---compiler------plain javascript.

Problems with C#
 1.PORTABLITY.
 2.COMPLEXITY

2012, ecma committe published a specfication, ECMA 6 spec
ES 6 Features:
 1.classes
 2.let,const
 3.new literal types
 4.arrow function
 5.new Objects - Promise....
 etc.......

MS Started redesigning the whole project, target ecma 6 as base language.

 ES 6 + Static Typing + added new extra fetures => The brith of Typescript.


Typescript----compile----Plain javascript

Typescript is strongly typed, object oriented  javascript.

Now you can use type script to build better object oriented systems using javascript.


TS is not compititor or replacer for javascript but it complements js.


Object Oriented Principles:
 
1.Abstraction
2.Encaspulation
3.Modualirty
    -breaking the code 
4.Typing
   -polyphism
      -compile - strongly typed
      -runitme - strong typed
5.Hierachy
   -has-a
   -is-a : inheritance
................
6.Concurrency
7.Persistency.

if any programming language follows the first 5 principles 100%, those languages are 
called as "Object oriented Programming" languages

if any language does not implement any one principle or partially, those languages are 
called "Object based language".

/////////////////////////////////////////////////////////////////////////////////////////

Type scrit is a typed superset of javascript that compiles to plain javascript

                  any browser,an host, any os, any device

///////////////////////////////////////////////////////////////////////////////////////////

Lab :

1.nodejs
2.ts compiler 
3.editor - vs code

select your work-dire

>mkdir mytsapps

cd mytsapps

mytsapps> npm init --yes
mytsapps> code .
 
........................................................................................

TS Compiler:

mytsapps>npm install typescript --save-dev


How to write ts code , compile?

fileName.ts

compiler - tsc

tsc folder/fileName.tsc
tsc src/index.tsc

package.json 
 scripts section

scripts is for java script automation.

scripts: {
 "command" : "Task to executed"
}

if you run the command the task will be executed.

commands are provided by npm by default , those are built in commands
"start"
"test"
"install"
 ........

task:
 "start" : "node index.js"
 
npm start ----->

commands can even be custom commands

"subu"  : "node index.js"

npm run subu

I m going to automate typescript compilation using npm script.

"build": "tsc src/index.ts"

//////////////////////////////////////////////////////////////////////////////////////////

package.json
{
  "name": "tsapps",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start" : "tsc"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "",
  "devDependencies": {
    "typescript": "^5.7.2"
  }
}
How to run?
tsapps/index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
   <h1>Typescript App</h1>
   <script src="build/index.js"></script> 
</body>
</html>

In order to run we need web server
......................................................................................
How to compile the code automatically ,without compiling code manually?
 we compiler option 
   --watch

package.json
 "start" : "tsc --watch"
..................................................................................
			 Language fundamentals
..................................................................................

variables,types,iterals

var | let | const variableName= value(literal)

var i =100
let i = 200

types of literals:
..................
1.number
2.string
3.boolean
4.undefined
5.NaN
6.infinity
7.null
8.function
9.object

based on literal only type is identified

1.number
   number,NaN,infinity
2.string
3.boolean
4.undefined
5.function
6.object
  null,object

ts types:
 js types + 
 
1.enum
2.any
3.Tuple
4.Reference types
   class,interfaces,type


variable declaration:

 let variableName:Type =Value


Variable and type declaration:
//basic variable declaration

let firstName:string="Subramanian"
console.log(firstName)

firstName=900

here compiler catches the error -compile time error

[12:30:45 PM] File change detected. Starting incremental compilation...

src/index.ts:6:1 - error TS2322: Type 'number' is not assignable to type 'string'.

6 firstName=900
  ~~~~~~~~~

[12:30:45 PM] Found 1 error. Watching for file changes.

................
String:
//string : "",'',``,`` with string interpolation

let firstName: string = "Subramanian"
let lastName: string = 'Murugan'
//string concatation using +
let fullName: string = firstName + lastName
//string concatation using ``
fullName = `${firstName} ${lastName}`

console.log("Name" + fullName)
console.log("Name", fullName)
console.log(`Name ${fullName}`)

//multi line using back tic

let template=`
 <div>
    <h1>Hello</h1>
 </div>
`
console.log(template)

Number:
//numbers size is 64 bit aka double

let price: number = 100
let qty: number = 10
let total: number = price * qty
console.log(`Total ${total}`)

boolean:
//boolean
let isValid:boolean = true 
let isEnabled:boolean = false 

console.log(` Valid : ${isValid}`)
console.log(` Enabled : ${isEnabled}`)
...................................................................................
			 Type inference
...................................................................................
let variable:type = literal

int a =10;

a = "hello" ;;compiler will throw error : compile time vertification.


Ways of declaring :

1.expilicit
  let variableName:type = value

2.implicit : Type inference

   if any variable is assigned with specific type

 let age =20;
  now variable value is 20, so ts initailizes the type of age is number ,to be verified
in furture assignements

 age=90;
 age ="hess" ;;//error is thrown : type infered.

// type system

//Explicit type declaration
//strings
let firstName:string = "Subramanian";
console.log(`First Name ${firstName}`);
//firstName = 1000;
firstName = "Test";

//numbers
let stockValue:number =100;
stockValue =900;

//booleans
let isEnabled:boolean  =true;
isEnabled  =false;

////////////////////////////////////////////////////////////////////////////////
//implicit type declaration : Type inferance is enabled, based on initail value assigment
let age = 20;
console.log(`Age ${age}`)
age = 18;

//age = "hello"
let isActive= true;
//isActive = "test";
///////////////////////////////////////////////////////////////////////////////////

Undefined:

//undefinded with implicit

let a;
console.log(`a ${a}`)
a = 100
console.log(`a ${a}`)

a = "Hello"

console.log(`a ${a}`)

//explicit
let b: undefined
b = 900

any:


let a:any;
console.log(`a ${a}`)
a = 100
console.log(`a ${a}`)

a = "Hello"

console.log(`a ${a}`)

any is recommended incase if you have requirement that variable need to take any value.

NaN:
//NaN

let a: any = "$100";
let b = 100
let c = a * b
console.log(c)


Infinity: div/0

let a: number = 100
let b: number = 0
let c = a / b
console.log(`C ${c}`)

....................................................................................

//advanced booleans ;
//in js everthing is true exepect the following values
/**
 * falsy values
 * 1.boolean false
 * 2.0
 * 3.undefined
 * 4.NaN
 * 5.null
 * 6.empty string ""/ ''
 */

//
let firstName = "Subramanian"
if (firstName) {
    console.log('ok')
} else {
    console.log('not ok')
}

































